{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started on Digitize This references and should not supercede the Digitize Tutorial guide. I tried to write this in a way that should be a bit more accessible to beginners. There are numerous other guides and references linked throughout this guide, you should read them. Consider this document amplification , not replacement , of those guides. As a first reference, you can read the official Digitize Docs here 1 If at any point you get stuck, you can email help@dsop.io to get help. A common error while getting started is finding that you do not have the permission to access a site, e.g. code.il2.dso.mil or jira.il2.dso.mil etc... You should contact help@dsop.io to get a ticket created for you in support of your Digitize project. Incidentally, this is also hosted on Digitize! \u21a9","title":"Getting Started"},{"location":"#getting-started-on-digitize","text":"This references and should not supercede the Digitize Tutorial guide. I tried to write this in a way that should be a bit more accessible to beginners. There are numerous other guides and references linked throughout this guide, you should read them. Consider this document amplification , not replacement , of those guides. As a first reference, you can read the official Digitize Docs here 1 If at any point you get stuck, you can email help@dsop.io to get help. A common error while getting started is finding that you do not have the permission to access a site, e.g. code.il2.dso.mil or jira.il2.dso.mil etc... You should contact help@dsop.io to get a ticket created for you in support of your Digitize project. Incidentally, this is also hosted on Digitize! \u21a9","title":"Getting Started on Digitize"},{"location":"Gotchas/","text":"Gotchas match your GPG key exactly to the email address that you use to sign in to code.il2.dso.mil. user.name user.email git config --local user.signingkey Node.js version The build will run using Node.js v16.3.0. I ran into issues because I originally built my project locally using npx create-react-app while using node18 and React 18 . This got messy. Better Solution : Clone the provided repo to your local machine and start from there. That is a version that will successfully build with the CI/CD pipeline.","title":"Gotchas"},{"location":"Gotchas/#gotchas","text":"match your GPG key exactly to the email address that you use to sign in to code.il2.dso.mil. user.name user.email git config --local user.signingkey","title":"Gotchas"},{"location":"Gotchas/#nodejs-version","text":"The build will run using Node.js v16.3.0. I ran into issues because I originally built my project locally using npx create-react-app while using node18 and React 18 . This got messy. Better Solution : Clone the provided repo to your local machine and start from there. That is a version that will successfully build with the CI/CD pipeline.","title":"Node.js version"},{"location":"Step%200/","text":"Step 0: Get on IL2 Mattermost You will need to log in to the Platform One hosted IL2 Mattermost server: https://chat.il2.dso.mil/ . Info Learn more about Impact Levels from GSA Cloud Information Center here . Follow the instructions here to register a new SSO (Single Sign On) account with Platform One. When you first join the IL2 Mattermost server you will enter the welcome team, and the Town Square channel within that. You need to join the Tron team on Mattermost. To do so, type the following in the text input line: /requestaccess team tron-air-force Note You must type the command in, you cannot copy/paste it. There is a command palette that will appear when you type the first / . Once your request has been approved, you will be added to the Tron team and placed into the Town Square channel.","title":"Step 0: Get on IL2 Mattermost"},{"location":"Step%200/#step-0-get-on-il2-mattermost","text":"You will need to log in to the Platform One hosted IL2 Mattermost server: https://chat.il2.dso.mil/ . Info Learn more about Impact Levels from GSA Cloud Information Center here . Follow the instructions here to register a new SSO (Single Sign On) account with Platform One. When you first join the IL2 Mattermost server you will enter the welcome team, and the Town Square channel within that. You need to join the Tron team on Mattermost. To do so, type the following in the text input line: /requestaccess team tron-air-force Note You must type the command in, you cannot copy/paste it. There is a command palette that will appear when you type the first / . Once your request has been approved, you will be added to the Tron team and placed into the Town Square channel.","title":"Step 0: Get on IL2 Mattermost"},{"location":"Step%201/","text":"Step 1: Request a new Digitize project Now that you're in the Tron channel, click on the + button in the left navigation bar (next to the team name, Tron) to open the channel list. Find the Digitize - Public team and join it. This is the place to ask questions and get help related to Digitize, CI/CD, and deployment of your project. In the channel header there will be a link to Request a new Digitize Repository . At time of writing, the link is a google form here . If you do not hear a response within a working day or two, you can post in the Digitize - Public channel and ask for help.","title":"Step 1: Request a new Digitize project"},{"location":"Step%201/#step-1-request-a-new-digitize-project","text":"Now that you're in the Tron channel, click on the + button in the left navigation bar (next to the team name, Tron) to open the channel list. Find the Digitize - Public team and join it. This is the place to ask questions and get help related to Digitize, CI/CD, and deployment of your project. In the channel header there will be a link to Request a new Digitize Repository . At time of writing, the link is a google form here . If you do not hear a response within a working day or two, you can post in the Digitize - Public channel and ask for help.","title":"Step 1: Request a new Digitize project"},{"location":"Step%202/","text":"Step 2: Configure your repository You will likely receive a DM in Mattermost with the link to your initialized repository. If your project was named my-project , expect the repository will be located at: https://code.il2.dso.mil/tron/products/dod-open-source/digitize/my-project The Digitize Tutorial provides a good guide to learn how to configure your repository. Expect that you will adjust several CI/CD settings and add several environment variables. Precisely which you need to set will depend on what type of site you are building. Build Tools The guide is designed for a React App, but you can use the following systems to build your site: Vanilla JS/HTML/CSS npm yarn mkdocs hugo Help The available CI/CD pipeline config files are viewable on the Digitize repository here . Env Variables The following environment variables are required for the CI/CD pipeline to run: Help The Digitize Tutorial for details and a more complete discussion of these environment variables. BUILD_OUTPUT_DIR => Required for npm, yarn, mkdocs, hugo DIGITIZE_DEPLOYMENT_TYPE => branch or tag DIGITIZE_REGISTRY_ACCESS_TOKEN => reference docs. This value is in not unique to your project and is listed in the docs. DIGITIZE_IL_TYPE => IL4, Digitize only supports IL4 deployment at this time. SKIP_E2E_TEST => Set to true to skip running e2e tests. They're broken right now. Protected Branches This was the weird thing for me at first. Help GitLab protected branch docs . The idea is that there are two types of pipelines. Full Staging/Deployment pipleines and a mini-pipeline for branches. The only difference is that the mini-pipeline does not push to staging or production. The full pipeline can only be used on your master branch. The mini pipelines will only run on protected branches. This is why you need protected branches. Unprotected branches cannot run pipelines and cannot merge into master . You can protect a specific branch, but that is cumbersome. GitLab lets you define a pattern with wildcard matching that will match the branch name and then protect that branch. For example a branch called fix/fix-rendering-issue would be protected with the pattern fix/* . This forces a branch-naming convention because your branches must comply with these patterns otherwise they will not build or merge. Tip Protect patterns fix/* and feature/* for your branches. This lets you work on new capabilities within the feature namespace and bug fixes within the fix namespace. Tip Allow Maintainers to merge and Developers+Maintainers to push. React specific You need to add a homepage field to your package.json file and set its value to \".\" . This is required for running the React App in a nested path. Congratulations Your repository should be ready to begin building your site!","title":"Step 2: Configure your repository"},{"location":"Step%202/#step-2-configure-your-repository","text":"You will likely receive a DM in Mattermost with the link to your initialized repository. If your project was named my-project , expect the repository will be located at: https://code.il2.dso.mil/tron/products/dod-open-source/digitize/my-project The Digitize Tutorial provides a good guide to learn how to configure your repository. Expect that you will adjust several CI/CD settings and add several environment variables. Precisely which you need to set will depend on what type of site you are building.","title":"Step 2: Configure your repository"},{"location":"Step%202/#build-tools","text":"The guide is designed for a React App, but you can use the following systems to build your site: Vanilla JS/HTML/CSS npm yarn mkdocs hugo Help The available CI/CD pipeline config files are viewable on the Digitize repository here .","title":"Build Tools"},{"location":"Step%202/#env-variables","text":"The following environment variables are required for the CI/CD pipeline to run: Help The Digitize Tutorial for details and a more complete discussion of these environment variables. BUILD_OUTPUT_DIR => Required for npm, yarn, mkdocs, hugo DIGITIZE_DEPLOYMENT_TYPE => branch or tag DIGITIZE_REGISTRY_ACCESS_TOKEN => reference docs. This value is in not unique to your project and is listed in the docs. DIGITIZE_IL_TYPE => IL4, Digitize only supports IL4 deployment at this time. SKIP_E2E_TEST => Set to true to skip running e2e tests. They're broken right now.","title":"Env Variables"},{"location":"Step%202/#protected-branches","text":"This was the weird thing for me at first. Help GitLab protected branch docs . The idea is that there are two types of pipelines. Full Staging/Deployment pipleines and a mini-pipeline for branches. The only difference is that the mini-pipeline does not push to staging or production. The full pipeline can only be used on your master branch. The mini pipelines will only run on protected branches. This is why you need protected branches. Unprotected branches cannot run pipelines and cannot merge into master . You can protect a specific branch, but that is cumbersome. GitLab lets you define a pattern with wildcard matching that will match the branch name and then protect that branch. For example a branch called fix/fix-rendering-issue would be protected with the pattern fix/* . This forces a branch-naming convention because your branches must comply with these patterns otherwise they will not build or merge. Tip Protect patterns fix/* and feature/* for your branches. This lets you work on new capabilities within the feature namespace and bug fixes within the fix namespace. Tip Allow Maintainers to merge and Developers+Maintainers to push.","title":"Protected Branches"},{"location":"Step%202/#react-specific","text":"You need to add a homepage field to your package.json file and set its value to \".\" . This is required for running the React App in a nested path. Congratulations Your repository should be ready to begin building your site!","title":"React specific"},{"location":"Step%203/","text":"Step 3: Configure your development environment There are a few things you need to do to get your development environment ready to work with IL2 GitLab. GPG signing THIS IS A CHALLENGE ON GFE DEVICES . I do not yet have a good solution. https://code.il2.dso.mil enforces GPG signing for all commits. This means you need to create a GPG key on your workstation and add it to your GitLab account. GPG keys in GitLab are connected with your user profile, not a specific repository. You can find your key in your profile settings . GitLab has a help page for signing commits with GPG here . I will not repeat these steps here. Git Config TODO: I just found this useful tutorial for managing a Work and Personal git config profile. The steps below do not use this method, but I think its pretty good and I might switch over to it as well! You will need to add several git config entries user.name user.email user.signingkey commit.gpgsign And possibly gpg.program Git Config, what is it? First, a bit of background on git config. The official docs are always a good place to start. The general idea is that git config supplies a bunch of configuration variables that git references. There are two scopes, global and local with local overriding any conflicting configurations from global . The global scope automatically applies to all git repositories, old, existing, and new. The local scope only applies to the repository you're currently in. Ask yourself, do I feel like a developer today? My setup is configured with my global values for user.* set to my personal GitHub account. This causes a problem because code.il2.dso.mil requires GPG signing. Your GPG key must be associated with a GitLab verified email that matches your committer identity . This means all three pieces have to line up: The email associated with your GPG key The email associated with your GitLab login (your .mil email) The email associated with git config You cannot change the GitLab login email, which means your GPG key and git config must be your .mil email account. The problem for my case is that my git config --global has user.email set to my personal email account, not my .mil. IF you only develop within the code.il2.dso.mil repository, then you should set your global git config values to your .mil email address and there is no problem. However, if like me, you do not wish to do this, skip to The solution, git config --local The solution is to use git config --local when setting values. This will let you provide overriding values that are scoped just to the current repository. Actually setting git config The command you'll need to use is the following: Global Local git config user.name 'First Last' git config --local user.name 'First Last' depending on your global/local preference. The name and email values are self explanatory. To get the value for user.signingkey you need to run gpg -k --keyid-format short . On Linux it will look like this: foo@bar:app$ gpg -k --keyid-format short /home/bar/.gnupg/pubring.kbx ----------------------------- sec rsa4096/ABCDEFGH 2022-01-01 [SC] ^------^ <------------------------- This is what you want ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH uid [ultimate] John Doe (comment) <your-email@something.mil> ssb rsa4096/ABCDEFGH 2022-01-01 [E] In this example you grab the 8 digits after rsa4096 on the key with [SC] . That would be ABCDEFGH . This string is the short reference to your key. git config user.signingkey ABCDEFGH The final setting that you need to configure is: git config commit.gpgsign true This will ensure that you sign every commit. If your commits are not signed, then your pushes will be rejected by code.il2.dso.mil . Personal Access Token By far the easiest way to push commits to the code.il2.dso.mil repository is to use a personal access token. A personal access token is like a password that lets your computer talk to the code.il2.dso.mil server. You can create one here . You can use the same token for all of your code.il2.dso.mil repositories. You will give the token a name, this is just so you can differentiate it from a separate token. The token will need write_repository and read_repository permissions at a minimum. When you create the token, you will be presented the text string that is your personal access token. Simplifying login I NEED TO CHECK THIS MAY NOT BE REQUIRED THIS IS NOT GOOD PRACTICE AS YOUR PAT IS STORED IN PLAINTEXT Best practice Use a credential helper. Read here for Linux and creating libsecret. Linux Windows OS X git config --global credential.helper libsecret git config --global credential.helper manager git config --global credential.helper osxkeychain (!!Windows untested, could be wincred instead of manager, reference this stack overflow thread !!) There are many ways to manage personal access tokens ( e.g. ). A way to simplify this is to prepend the token to the git remote url so that your pushes are automatically authenticated. If you do not, you should get a prompt asking for the token value when you attempt to push. Example: Your token is 123abc and your repository is code.il2.dso.mil/tron/products/dod-open-source/digitize/my-project.git then you would set your remote to https://oath2:123abc@code.il2.dso.mil/tron/products/dod-open-source/digitize/my-project.git . Congratulations Your development environment should be ready to go! Other pieces for your workstation If you're developing and use the react/npm toolchain, you will want to have node.js and npm installed so you can preview your app locally. There are numerous tutorials available for how to do this. Dockerized Development This is an alternative to setting up your local environment. Consider this when using anything other than vanilla JS/HTML/CSS. This will take advantage of VS Code's Docker extension and ability to run within a docker container. First you'll create a Dockerfile in your project. Example: FROM node:16.15.0 ENV NODE_ENV = development WORKDIR /usr/src/app COPY [ \"package.json\" , \"package-lock.json*\" , \"npm-shrinkwrap.json*\" , \"./\" ] RUN npm install --silent && mv node_modules ../ COPY . . EXPOSE 3000 RUN chown -R node /usr/src/app USER node CMD [ \"npm\" , \"start\" ] Then in VS Code you use the command palette to Remote-Container: Open folder in container... Then select your Dockerfile as the basis for the container. Your container image will be built and then VS Code will reopen, but this time from within the container. When you run npm run start it should automatically forward the port to your local machine. If not, there is a PORTS tab next to the terminal where you can manually add the necessary port forwarding.","title":"Step 3: Configure your development environment"},{"location":"Step%203/#step-3-configure-your-development-environment","text":"There are a few things you need to do to get your development environment ready to work with IL2 GitLab.","title":"Step 3: Configure your development environment"},{"location":"Step%203/#gpg-signing","text":"THIS IS A CHALLENGE ON GFE DEVICES . I do not yet have a good solution. https://code.il2.dso.mil enforces GPG signing for all commits. This means you need to create a GPG key on your workstation and add it to your GitLab account. GPG keys in GitLab are connected with your user profile, not a specific repository. You can find your key in your profile settings . GitLab has a help page for signing commits with GPG here . I will not repeat these steps here.","title":"GPG signing"},{"location":"Step%203/#git-config","text":"TODO: I just found this useful tutorial for managing a Work and Personal git config profile. The steps below do not use this method, but I think its pretty good and I might switch over to it as well! You will need to add several git config entries user.name user.email user.signingkey commit.gpgsign And possibly gpg.program","title":"Git Config"},{"location":"Step%203/#git-config-what-is-it","text":"First, a bit of background on git config. The official docs are always a good place to start. The general idea is that git config supplies a bunch of configuration variables that git references. There are two scopes, global and local with local overriding any conflicting configurations from global . The global scope automatically applies to all git repositories, old, existing, and new. The local scope only applies to the repository you're currently in.","title":"Git Config, what is it?"},{"location":"Step%203/#ask-yourself-do-i-feel-like-a-developer-today","text":"My setup is configured with my global values for user.* set to my personal GitHub account. This causes a problem because code.il2.dso.mil requires GPG signing. Your GPG key must be associated with a GitLab verified email that matches your committer identity . This means all three pieces have to line up: The email associated with your GPG key The email associated with your GitLab login (your .mil email) The email associated with git config You cannot change the GitLab login email, which means your GPG key and git config must be your .mil email account. The problem for my case is that my git config --global has user.email set to my personal email account, not my .mil. IF you only develop within the code.il2.dso.mil repository, then you should set your global git config values to your .mil email address and there is no problem. However, if like me, you do not wish to do this, skip to","title":"Ask yourself, do I feel like a developer today?"},{"location":"Step%203/#the-solution-git-config-local","text":"The solution is to use git config --local when setting values. This will let you provide overriding values that are scoped just to the current repository.","title":"The solution, git config --local"},{"location":"Step%203/#actually-setting-git-config","text":"The command you'll need to use is the following: Global Local git config user.name 'First Last' git config --local user.name 'First Last' depending on your global/local preference. The name and email values are self explanatory. To get the value for user.signingkey you need to run gpg -k --keyid-format short . On Linux it will look like this: foo@bar:app$ gpg -k --keyid-format short /home/bar/.gnupg/pubring.kbx ----------------------------- sec rsa4096/ABCDEFGH 2022-01-01 [SC] ^------^ <------------------------- This is what you want ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH uid [ultimate] John Doe (comment) <your-email@something.mil> ssb rsa4096/ABCDEFGH 2022-01-01 [E] In this example you grab the 8 digits after rsa4096 on the key with [SC] . That would be ABCDEFGH . This string is the short reference to your key. git config user.signingkey ABCDEFGH The final setting that you need to configure is: git config commit.gpgsign true This will ensure that you sign every commit. If your commits are not signed, then your pushes will be rejected by code.il2.dso.mil .","title":"Actually setting git config"},{"location":"Step%203/#personal-access-token","text":"By far the easiest way to push commits to the code.il2.dso.mil repository is to use a personal access token. A personal access token is like a password that lets your computer talk to the code.il2.dso.mil server. You can create one here . You can use the same token for all of your code.il2.dso.mil repositories. You will give the token a name, this is just so you can differentiate it from a separate token. The token will need write_repository and read_repository permissions at a minimum. When you create the token, you will be presented the text string that is your personal access token.","title":"Personal Access Token"},{"location":"Step%203/#simplifying-login","text":"I NEED TO CHECK THIS MAY NOT BE REQUIRED THIS IS NOT GOOD PRACTICE AS YOUR PAT IS STORED IN PLAINTEXT Best practice Use a credential helper. Read here for Linux and creating libsecret. Linux Windows OS X git config --global credential.helper libsecret git config --global credential.helper manager git config --global credential.helper osxkeychain (!!Windows untested, could be wincred instead of manager, reference this stack overflow thread !!) There are many ways to manage personal access tokens ( e.g. ). A way to simplify this is to prepend the token to the git remote url so that your pushes are automatically authenticated. If you do not, you should get a prompt asking for the token value when you attempt to push. Example: Your token is 123abc and your repository is code.il2.dso.mil/tron/products/dod-open-source/digitize/my-project.git then you would set your remote to https://oath2:123abc@code.il2.dso.mil/tron/products/dod-open-source/digitize/my-project.git . Congratulations Your development environment should be ready to go!","title":"Simplifying login"},{"location":"Step%203/#other-pieces-for-your-workstation","text":"If you're developing and use the react/npm toolchain, you will want to have node.js and npm installed so you can preview your app locally. There are numerous tutorials available for how to do this.","title":"Other pieces for your workstation"},{"location":"Step%203/#dockerized-development","text":"This is an alternative to setting up your local environment. Consider this when using anything other than vanilla JS/HTML/CSS. This will take advantage of VS Code's Docker extension and ability to run within a docker container. First you'll create a Dockerfile in your project. Example: FROM node:16.15.0 ENV NODE_ENV = development WORKDIR /usr/src/app COPY [ \"package.json\" , \"package-lock.json*\" , \"npm-shrinkwrap.json*\" , \"./\" ] RUN npm install --silent && mv node_modules ../ COPY . . EXPOSE 3000 RUN chown -R node /usr/src/app USER node CMD [ \"npm\" , \"start\" ] Then in VS Code you use the command palette to Remote-Container: Open folder in container... Then select your Dockerfile as the basis for the container. Your container image will be built and then VS Code will reopen, but this time from within the container. When you run npm run start it should automatically forward the port to your local machine. If not, there is a PORTS tab next to the terminal where you can manually add the necessary port forwarding.","title":"Dockerized Development"},{"location":"Step%204/","text":"Step 4: Get a Scratch Space assigned Scratch space is a server-side key-value store that allows for data persistence. It is part of the Tron Common UI API. You need to post in the Tron/Arcade channel to get a Scratch Space assigned to you. You will be the SCRATCH_ADMIN for the scratch space. TODO: Fill in more steps once I get this done for the first time. When running docker compose build I ran into an error with 3 images: registry.il2.dso.mil/platform-one/devops/pipeline-templates/base-image/harden-nginx-19:1.19.2 registry.il2.dso.mil/platform-one/devops/pipeline-templates/ironbank/nodejs16:16.3.0 registry.il2.dso.mil/platform-one/devops/pipeline-templates/ironbank/maven-jdk11:3.6.3 The way I solved this was to docker pull <image> for each of the three. Something in the docker compose was not pulling these dependencies. I think it might have had trouble getting the authentication for regular docker and registry.il2.dso.mil. docker compose build still fails with: #0 73.35 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean (default-clean) on project common-api: Execution default-clean of goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean failed: Plugin org.apache.maven.plugins:maven-clean-plugin:3.1.0 or one of its dependencies could not be resolved: The following artifacts could not be resolved: org.apache.maven:maven-model:jar:3.0, org.codehaus.plexus:plexus-utils:jar:2.0.4, org.apache.maven:maven-artifact:jar:3.0, org.sonatype.sisu:sisu-inject-plexus:jar:1.4.2, org.sonatype.sisu:sisu-inject-bean:jar:1.4.2, org.sonatype.sisu:sisu-guice:jar:noaop:2.1.7, org.apache.maven.shared:maven-shared-utils:jar:3.2.1, commons-io:commons-io:jar:2.5: Could not transfer artifact org.apache.maven:maven-model:jar:3.0 from/to central (https://repo.maven.apache.org/maven2): Transfer failed for https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/3.0/maven-model-3.0.jar: Unknown host repo.maven.apache.org: Name or service not known -> [Help 1] ... ... failed to solve: executor failed running [/bin/sh -c mvn clean]: exit code: 1 Those components are from the backend component from docker-compose.yml . So, I just ran docker compose build backend to run that stage in isolation and it worked! I have not explored why this difference occurs . After running docker compose build and then docker compose build backend I believe that docker compose up -d will now work.","title":"Step 4: Get a Scratch Space assigned"},{"location":"Step%204/#step-4-get-a-scratch-space-assigned","text":"Scratch space is a server-side key-value store that allows for data persistence. It is part of the Tron Common UI API. You need to post in the Tron/Arcade channel to get a Scratch Space assigned to you. You will be the SCRATCH_ADMIN for the scratch space. TODO: Fill in more steps once I get this done for the first time. When running docker compose build I ran into an error with 3 images: registry.il2.dso.mil/platform-one/devops/pipeline-templates/base-image/harden-nginx-19:1.19.2 registry.il2.dso.mil/platform-one/devops/pipeline-templates/ironbank/nodejs16:16.3.0 registry.il2.dso.mil/platform-one/devops/pipeline-templates/ironbank/maven-jdk11:3.6.3 The way I solved this was to docker pull <image> for each of the three. Something in the docker compose was not pulling these dependencies. I think it might have had trouble getting the authentication for regular docker and registry.il2.dso.mil. docker compose build still fails with: #0 73.35 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean (default-clean) on project common-api: Execution default-clean of goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean failed: Plugin org.apache.maven.plugins:maven-clean-plugin:3.1.0 or one of its dependencies could not be resolved: The following artifacts could not be resolved: org.apache.maven:maven-model:jar:3.0, org.codehaus.plexus:plexus-utils:jar:2.0.4, org.apache.maven:maven-artifact:jar:3.0, org.sonatype.sisu:sisu-inject-plexus:jar:1.4.2, org.sonatype.sisu:sisu-inject-bean:jar:1.4.2, org.sonatype.sisu:sisu-guice:jar:noaop:2.1.7, org.apache.maven.shared:maven-shared-utils:jar:3.2.1, commons-io:commons-io:jar:2.5: Could not transfer artifact org.apache.maven:maven-model:jar:3.0 from/to central (https://repo.maven.apache.org/maven2): Transfer failed for https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/3.0/maven-model-3.0.jar: Unknown host repo.maven.apache.org: Name or service not known -> [Help 1] ... ... failed to solve: executor failed running [/bin/sh -c mvn clean]: exit code: 1 Those components are from the backend component from docker-compose.yml . So, I just ran docker compose build backend to run that stage in isolation and it worked! I have not explored why this difference occurs . After running docker compose build and then docker compose build backend I believe that docker compose up -d will now work.","title":"Step 4: Get a Scratch Space assigned"},{"location":"mkdocs/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}